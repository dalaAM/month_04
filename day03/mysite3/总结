
过滤器：
    用在模板上，目的是解决视图的内容增加


模板继承：
1 模板继承最重要的作用：如果出现一个页面或者是多个页面整体结构相同或者部分结构是相同的情况，使用
模板继承实现功能，可以减少代码的数量


2 使用场景： 前端框架，如博客，或者是一些社区网站的基本框架的搭建都可以使用代码复用

3 模板继承流程：
    1.首先在父模板中定义block标签：{% block block_name %}
            如： <div id="conent">
                    {% block conent %}
                    <h3> 这是首页 </h3>
                    {% endblock %}
                </div>
    2.在子模板中继承父模板的内容：`{% extends '父模板名称' %}` 如：`{% extends 'base.html' %}`
    3.重写父模板中的内容块儿 ：{% block block_name %} 子模板块用来覆盖父模板中 block_name 块的内容
    {% endblock block_name %}
            如：{% block title %}
                新闻页
               {% endblock  %}

                {% block conent %}
                    <h1>  this is a news </h1>
                {% endblock  %}

4 django应用流程
    urls --> views -->templates
    定义父模板和子模板的路由，
    给到视图函数，
    将页面返回到浏览器
    父模板中将子模板的路径给到链接

5   继承过来的模板块中的内容才可以被更改
    子模板可以继承父模板的全部结构，也可以继承部分结构


url反向解析
 在django urls当中给路由定义一个别名，模板可以通过这个别名找到路由地址
 基础语法 {% url 'hap' %}

 好处是:当我在url中更改了原始路由，不需要修改模板中的路径就可以使用(相当于使用了一个别名)
 反向解析也可以增加参数
 模板链接中的路由不会写死
 reverse 反向解析，当url定义了一个名称，在视图中通过reverse函数可以拿到这个路由



 路由：是用户在浏览器地址栏上输入的内容，
 路径：个人找硬盘内的文件



 静态文件：
 1.访问需要经过多次请求，
 2,静态文件可以通过绝对路径在地址栏上输入找到文件
 3.模板中可以通过 {% static %}标签访问静态文件


 启动应用：python3 manage.py startapp user
 migrations 模型迁移脚本 和模型相关和数据库相关
 admin 管理后台


应用下templates 和 外层templates 都存在时，django得查找模板规则
1，优先查找外层templates目录下的模板
2，按INSTALLED_APPS配置下的 应用顺序 逐层查找
 先创建应用 在注册应用
    django 子应用中html文件名冲突，（引擎会按照应用的顺序查找文件）如果查询到的第一个文件名，则会查找，如果
 解决方案：
    1.在每个应用的templates当中，添加文件夹，将html文件放入，视图中，按照最新的文件地址传参即可
        如：return render(request,'user/index.html')


创建应用的过程：
1.setting 文件中（INSTALLED_APPS列表中）注册子应用
2.主路由中添加子路由
3.子路由中添加路由
4.添加完路由之后，创建视图函数
5.根据视图函数 创建模板